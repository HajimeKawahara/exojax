"""LPF filter test module.
LPF filter is a filter of a line profile generated by LPF Direct method.
This filter is used in MODIT/PreMODIT to convolve the line profile.
"""

import pytest
import jax.numpy as jnp
from jax import vmap
import numpy as np
from exojax.test.emulate_mdb import mock_wavenumber_grid
from exojax.spec.ditkernel import fold_voigt_kernel_logst
from exojax.spec.lpffilter import generate_lpffilter
from jax import config


def lpffilter_agreement_with_fold_voigt_kernel_logst():
    config.update("jax_enable_x64", True)
    nu_grid, wav, resolution = mock_wavenumber_grid()
    pmarray = np.ones(len(nu_grid) + 1)
    pmarray[1::2] = pmarray[1::2] * -1.0
    nsigmaD = 5.0
    ngammaL_grid = jnp.array([1.0, 10.0, 100.0])
    log_ngammaL_grid = jnp.log(ngammaL_grid)
    Ng_nu = len(nu_grid)
    vk = fold_voigt_kernel_logst(
        jnp.fft.rfftfreq(2 * Ng_nu, 1),
        jnp.log(nsigmaD),
        log_ngammaL_grid,
        Ng_nu,
        pmarray,
    )
    vkfilter = jnp.fft.irfft(vk,axis=0)
    vmap_generate_lpffilter = vmap(generate_lpffilter, (None, None, 0),0)
    lpffilter = vmap_generate_lpffilter(Ng_nu, nsigmaD, ngammaL_grid)
    diff_filter = np.abs(vkfilter.T - lpffilter)
    print(np.max(diff_filter))
    
    assert np.max(diff_filter) < 3.0e-9 #2.7824980652901843e-09 Feb 5th 2025

    return vk, vkfilter, lpffilter, diff_filter, ngammaL_grid


if __name__ == "__main__":
    vk, vkfilter, lpffilter, diff_filter, ngammaL_grid = lpffilter_agreement_with_fold_voigt_kernel_logst()

    # ifft/fft error
    vkrecover = jnp.fft.rfft(vkfilter, axis=0)
    diff_fftrecover = np.abs(vk - vkrecover)

    import matplotlib.pyplot as plt

    fig = plt.figure()
    ax = fig.add_subplot(211)
    ax.set_title("lpffilter vs vk")
    for i in range(0, len(ngammaL_grid)):
        plt.plot(vkfilter[:,i], label="tilde vk", alpha=0.3, color="C"+str(i))
        plt.plot(lpffilter[i, :], label="lpffilter", ls="dashed", alpha=1.0, color="C"+str(i))
        plt.plot(diff_filter[i,:], label="diff", alpha=0.3, color="C"+str(i))
    plt.yscale("log")
    plt.legend()
    ax = fig.add_subplot(212)
    ax.set_title("ifft/fft error")
    for i in range(0, len(ngammaL_grid)):
        #plt.plot(vk[:, i], alpha=0.3, label="vk")
        #plt.plot(vkrecover[:,i], label="vkrecover", alpha=0.3)
        plt.plot(diff_fftrecover[:,i], label="diff", alpha=0.3, color="C"+str(i))
        plt.legend()
    plt.savefig("tildevk.png")





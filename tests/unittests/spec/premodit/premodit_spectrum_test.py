""" short integration tests for PreMODIT spectrum"""
import pytest
import pkg_resources
import pandas as pd
import numpy as np
from exojax.spec.initspec import init_premodit
from exojax.spec.setrt import gen_wavenumber_grid
from exojax.test.emulate_broadpar import mock_broadpar_exomol
from exojax.test.emulate_mdb import mock_mdbExoMol
from exojax.spec.molinfo import molmass
from exojax.spec import normalized_doppler_sigma


def test_rt_exomol():
    import jax.numpy as jnp
    from exojax.spec import rtransfer as rt
    from exojax.spec import molinfo
    from exojax.spec.premodit import xsmatrix
    from exojax.spec.rtransfer import dtauM
    from exojax.spec.rtransfer import rtrun
    from exojax.spec.planck import piBarr
    
    mdb = mock_mdbExoMol()

    Parr, dParr, k = rt.pressure_layer(NP=100)
    T0_in = 1300.0
    alpha_in = 0.1
    Tarr = T0_in * (Parr)**alpha_in

    MMR = 0.1
    nu_grid, wav, res = gen_wavenumber_grid(22900.0,
                                        23100.0,
                                        15000,
                                        unit='AA',
                                        xsmode="modit")
    interval_contrast = 0.1
    dit_grid_resolution = 0.1
    Ttyp = 2000.0
    g = 2478.57

    lbd, multi_index_uniqgrid, elower_grid, ngamma_ref_grid, n_Texp_grid, R, pmarray = init_premodit(
        mdb.nu_lines,
        nu_grid,
        mdb.elower,
        mdb.alpha_ref,
        mdb.n_Texp,
        mdb.Sij0,
        Ttyp,
        interval_contrast=interval_contrast,
        dit_grid_resolution=dit_grid_resolution,
        warning=False)

    Mmol = molinfo.molmass("CO")
    xsm = xsmatrix(Tarr, Parr, R, pmarray, lbd, nu_grid, ngamma_ref_grid, n_Texp_grid,
             multi_index_uniqgrid, elower_grid, Mmol, mdb)
    dtau = dtauM(dParr, jnp.abs(xsm), MMR * np.ones_like(Parr), Mmol, g)
    sourcef = piBarr(Tarr, nu_grid)
    F0 = rtrun(dtau, sourcef)


#    from exojax.test.data import TESTDATA_CO_EXOMOL_MODIT_EMISSION_REF
#    filename = pkg_resources.resource_filename(
#        'exojax', 'data/testdata/' + TESTDATA_CO_EXOMOL_MODIT_EMISSION_REF)
#    dat = pd.read_csv(filename, delimiter=",", names=("nus", "flux"))

    # The reference data was generated by
    #
    np.savetxt("premodit_rt_test_ref.txt",np.array([nu_grid,F0]).T,delimiter=",")
    #
    # Because of errors from GPU, using pytest.approx does not pass the condition of the assertion error.
    # Instead, we use an absolute relative difference < 2 % as a condition.
    # We also note that we found the error at the edge of data exceed 2 %. Therefore, we removed the edge here.
    # residual = np.abs(F0[:12000]/dat["flux"].values[:12000] - 1.0)
    # print(np.max(residual))
    # assert np.all(residual < 0.02)

    #return F0


if __name__ == "__main__":
    test_rt_exomol()

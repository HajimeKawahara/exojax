""" short integration tests for MODIT cross section
"""
import pytest
import pkg_resources
import pandas as pd
import numpy as np
from exojax.spec.opacalc import OpaModit
from exojax.test.emulate_mdb import mock_mdb
from exojax.test.emulate_mdb import mock_wavenumber_grid

#The following data can be regenerated by tests/generate_xs.py
from exojax.test.data import TESTDATA_CO_EXOMOL_MODIT_XS_REF
from exojax.test.data import TESTDATA_CO_HITEMP_MODIT_XS_REF_AIR

from jax.config import config

config.update("jax_enable_x64", True)

testdata = {}
testdata["exomol"] = TESTDATA_CO_EXOMOL_MODIT_XS_REF
testdata["hitemp"] = TESTDATA_CO_HITEMP_MODIT_XS_REF_AIR


@pytest.mark.parametrize("db",["exomol","hitemp"])
def test_xsection_modit(db):

    ### DO NOT CHANGE ###
    Ttest = 1200  #fix to compare w/ precomputed xs by MODIT.
    #####################
    Ptest = 1.0
    mdb = mock_mdb(db)
    nu_grid, wav, res = mock_wavenumber_grid()
    opa = OpaModit(mdb=mdb, nu_grid=nu_grid, dit_grid_resolution=0.1)
    xsv = opa.xsvector(Ttest, Ptest)
    filename = pkg_resources.resource_filename('exojax',
                                               'data/testdata/' + testdata[db])
    dat = pd.read_csv(filename, delimiter=",", names=("nus", "xsv"))
    res = np.max(np.abs(1.0 - xsv / dat["xsv"].values))
    print(res)
    assert res < 1.e-4
    return opa.nu_grid, xsv, Ttest


if __name__ == "__main__":
    #comparison with MODIT
    import matplotlib.pyplot as plt

    #db = "hitemp"
    db = "exomol"

    nus, xs, Tin = test_xsection_modit(db)
    filename = pkg_resources.resource_filename('exojax',
                                               'data/testdata/' + testdata[db])

    dat = pd.read_csv(filename, delimiter=",", names=("nus", "xsv"))
    fig = plt.figure()
    ax = fig.add_subplot(211)
    plt.title(" T=" + str(Tin))
    ax.plot(nus, xs, label="MODIT", ls="dashed")
    ax.plot(nus, dat["xsv"], label="MODIT ref")
    plt.legend()
    plt.yscale("log")
    plt.ylabel("cross section (cm2)")
    ax = fig.add_subplot(212)
    ax.plot(nus, 1.0 - xs / dat["xsv"], label="dif = (MODIT ref - MODIT)/MODIT ref")
    plt.ylabel("dif")
    plt.xlabel("wavenumber cm-1")
    plt.axhline(0.01, color="gray", lw=0.5)
    plt.axhline(-0.01, color="gray", lw=0.5)
    #plt.ylim(-0.05, 0.05)
    plt.legend()
    plt.savefig("modit_"+str(db)+".png")
    plt.show()

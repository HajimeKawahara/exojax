import jax.numpy as jnp

RP = jnp.array(
    [
        -4.79443220978201773821e9,
        1.95617491946556577543e12,
        -2.49248344360967716204e14,
        9.70862251047306323952e15,
    ]
)
RQ = jnp.array(
    [
        1.0,
        4.99563147152651017219e2,
        1.73785401676374683123e5,
        4.84409658339962045305e7,
        1.11855537045356834862e10,
        2.11277520115489217587e12,
        3.10518229857422583814e14,
        3.18121955943204943306e16,
        1.71086294081043136091e18,
    ]
)
DR1 = 5.78318596294678452118e0
DR2 = 3.04712623436620863991e1
PP = jnp.array(
    [
        7.96936729297347051624e-4,
        8.28352392107440799803e-2,
        1.23953371646414299388e0,
        5.44725003058768775090e0,
        8.74716500199817011941e0,
        5.30324038235394892183e0,
        9.99999999999999997821e-1,
    ]
)
PQ = jnp.array(
    [
        9.24408810558863637013e-4,
        8.56288474354474431428e-2,
        1.25352743901058953537e0,
        5.47097740330417105182e0,
        8.76190883237069594232e0,
        5.30605288235394617618e0,
        1.00000000000000000218e0,
    ]
)
QP = jnp.array(
    [
        -1.13663838898469149931e-2,
        -1.28252718670509318512e0,
        -1.95539544257735972385e1,
        -9.32060152123768231369e1,
        -1.77681167980488050595e2,
        -1.47077505154951170175e2,
        -5.14105326766599330220e1,
        -6.05014350600728481186e0,
    ]
)
QQ = jnp.array(
    [
        1.0,
        6.43178256118178023184e1,
        8.56430025976980587198e2,
        3.88240183605401609683e3,
        7.24046774195652478189e3,
        5.93072701187316984827e3,
        2.06209331660327847417e3,
        2.42005740240291393179e2,
    ]
)
PIO4 = 0.78539816339744830962
SQ2OPI = 0.79788456080286535588


def j0(x):
    """Bessel function of the 1st kind, order=0.

    Args:
        x: x

    Returns:
        J0
    """
    x = jnp.where(x > 0.0, x, -x)

    z = x * x
    ret = 1.0 - z / 4.0

    p = (z - DR1) * (z - DR2)
    p = p * jnp.polyval(RP, z) / jnp.polyval(RQ, z)
    ret = jnp.where(x < 1e-5, ret, p)

    # required for autograd not to fail when x includes 0
    xinv5 = jnp.where(x <= 5.0, 0.0, 1.0 / (x + 1e-10))
    w = 5.0 * xinv5
    z = w * w
    p = jnp.polyval(PP, z) / jnp.polyval(PQ, z)
    q = jnp.polyval(QP, z) / jnp.polyval(QQ, z)
    xn = x - PIO4
    p = p * jnp.cos(xn) - w * q * jnp.sin(xn)
    ret = jnp.where(x <= 5.0, ret, p * SQ2OPI * jnp.sqrt(xinv5))

    return ret

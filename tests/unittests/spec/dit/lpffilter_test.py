"""LPF filter test module.
LPF filter is a filter of a line profile generated by LPF Direct method.
This filter is used in MODIT/PreMODIT to convolve the line profile.
"""

import pytest
import jax.numpy as jnp
import numpy as np
from exojax.test.emulate_mdb import mock_wavenumber_grid
from exojax.spec.ditkernel import fold_voigt_kernel_logst
from exojax.spec.lpf import voigt
from jax import config


def lpffilter_agreement_with_fold_voigt_kernel_logst():
    config.update("jax_enable_x64", True)
    nu_grid, wav, resolution = mock_wavenumber_grid()
    pmarray = np.ones(len(nu_grid) + 1)
    pmarray[1::2] = pmarray[1::2] * -1.0
    nsigmaD = 5.0
    ngammaL_grid = jnp.array([10.0])
    log_ngammaL_grid = jnp.log(ngammaL_grid)
    Ng_nu = len(nu_grid)

    vk = fold_voigt_kernel_logst(
        jnp.fft.rfftfreq(2 * Ng_nu, 1),
        jnp.log(nsigmaD),
        log_ngammaL_grid,
        Ng_nu,
        pmarray,
    )

    vkfilter = jnp.fft.irfft(vk[:, 0])

    # diff = vkfilter[1:Ng_nu] - vkfilter[Ng_nu+1:][::-1]
    # print(np.sum(diff)) # should be nearly zero
    # print(vkfilter[0], vkfilter[Ng_nu]) #DC component, Nyquist component

    # Oneside

    lpffilter = generate_lpffilter(nsigmaD, ngammaL_grid[0], Ng_nu)

    diff_filter = np.abs(vkfilter - lpffilter)

    # ifft/fft error
    vkrecover = jnp.fft.rfft(vkfilter)
    diff_fftrecover = np.abs(vk[:, 0] - vkrecover)

    import matplotlib.pyplot as plt

    fig = plt.figure()
    ax = fig.add_subplot(211)
    plt.plot(vkfilter[0:Ng_nu], label="tilde vk", alpha=0.3)
    plt.plot(lpffilter, label="lpffilter", ls="dashed", alpha=0.3)
    plt.plot(diff_filter, label="diff", alpha=0.3)
    plt.yscale("log")
    plt.legend()
    ax = fig.add_subplot(212)
    plt.plot(vk[:, 0], alpha=0.3, label="vk")
    plt.plot(vkrecover, label="vkrecover", alpha=0.3)
    plt.plot(diff_fftrecover, label="diff", alpha=0.3)
    plt.legend()
    plt.savefig("tildevk.png")


def generate_lpffilter(nsigmaD, ngammaL, nfilter):
    """Generates LPF filter

    Args:
        nsigmaD (float): normalized gaussian standard deviation, resolution*betaT/nu betaT is the STD of Doppler broadening
        ngammaL (float): normalized Lorentzian half width
        nfilter (int): length of the wavenumber grid of lpffilter

    Returns:
        array: LPF filter
    """
    # dq is equivalent to resolution*jnp.log(nu_grid) - resolutiona*jnp.log(nu_grid[0]) (+ Nyquist)
    dq = jnp.arange(0, nfilter + 1)
    lpffilter_oneside = voigt(dq, nsigmaD, ngammaL)
    return jnp.concatenate([lpffilter_oneside, lpffilter_oneside[1:-1][::-1]])


if __name__ == "__main__":
    lpffilter_agreement_with_fold_voigt_kernel_logst()

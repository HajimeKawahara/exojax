#%%
import numpy as np


#arr[0:2, iTwt, iTref, idE, 0] = Tl, Tu
print(dEarr)
print(np.shape(arr))
# %%
import matplotlib.pyplot as plt
import warnings


def optimal_params(Tl,
                   Tu,
                   diffmode=2,
                   makefig=False,
                   filename="elower_grid_trange.npz"):
    """derive the optimal parameters for a given Tu and Tl, 
       which satisfies x % precision within [Tl, Tu]

    Args:
        Tl (float): lower temperature
        Tu (float): upper temperature
        diffmode (int, optional): diff mode. Defaults to 2.
        makefig (bool, optional): if you wanna make a fig. Defaults to False.
        filename: grid_trange file, generated by elower_grid.py
        
    Returns:
        float: dE, Tref, Twt (optimal ones)
    """

    dat = np.load(filename)
    arr = dat["arr_0"]
    #Tarr = dat["arr_1"]
    Twtarr = dat["arr_2"]
    Trefarr = dat["arr_3"]
    dEarr = dat["arr_4"]

    if Tl > Tu:
        raise ValueError("Tl must be smaller than Tu.")
    if diffmode > 2:
        raise ValueError("diffmode is currently to be <= 2.")

    maskl = (arr[0, :, :, :, diffmode] <= Tl)
    masku = (arr[1, :, :, :, diffmode] >= Tu)
    mask = maskl * masku
    for i in range(len(dEarr)):
        k = -i - 1
        j = np.sum(mask[:, :, k])
        Tlarr = arr[0, :, :, k, diffmode]
        Tuarr = arr[1, :, :, k, diffmode]
        if j > 0:
            indices = np.where(mask[:, :, k])
            Twtallow = Twtarr[indices[0]]
            Trefallow = Trefarr[indices[1]]
            Tlist = np.array([Twtallow, Trefallow]).T
            print(
                "dE=",
                dEarr[k],
                "Tl-Tu",
            )
        if j > 0 and makefig:
            makefig = False
            #:,: = Y, X = Twt, Tref
            fig = plt.figure(figsize=(15, 5))
            ax = fig.add_subplot(131)
            c = draw_map(Tlarr, ax, Tu * 1.2)
            pltadd(c, Trefallow, Twtallow)
            ax = fig.add_subplot(132)
            c = draw_map(Tuarr, ax, Tu * 1.2)
            pltadd(c, Trefallow, Twtallow)
            ax = fig.add_subplot(133)
            c = draw_map(Tuarr - Tlarr, ax, Tu * 1.2)
            pltadd(c, Trefallow, Twtallow)
            plt.show()
        if j == 1:
            return dEarr[k], Trefallow[0], Twtallow[0]
        elif j > 1:
            #choose Twt > Tref if exists and the largest interval.
            diff = Twtallow - Trefallow
            ind = np.argsort(diff)[::-1]
            return dEarr[k], Trefallow[ind[0]], Twtallow[ind[0]]

        if i == len(dEarr) - 1:
            warnings.warn("Couldn't find the params.")
            return None, None, None


def draw_map(value, ax, Tmax_view):
    c = ax.pcolor(Trefarr,
                  Twtarr,
                  value,
                  cmap="rainbow",
                  vmin=0.0,
                  vmax=Tmax_view)
    ax.set_aspect("equal")
    ax.set_xscale("log")
    ax.set_yscale("log")
    return c


def pltadd(c, Trefallow, Twtallow):
    plt.plot((Trefallow), (Twtallow), "+", color="white")
    plt.colorbar(c, shrink=0.7)
    plt.ylabel("Twt (K)")
    plt.xlabel("Tref (K)")
    #plt.gca().invert_yaxis()


Tl_in = 500.0  #K
Tu_in = 1500.0  #K
diffmode = 1
optimal_params(Tl_in, Tu_in, diffmode)
# %%

# %%
